// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MonitorDriveAPI.Data;

#nullable disable

namespace MonitorDriveAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250129150246_01-29-25")]
    partial class _012925
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MonitorDriveAPI.Models.Entities.Driver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Metrics")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Noun")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Stars")
                        .HasColumnType("float");

                    b.Property<double>("Target")
                        .HasColumnType("float");

                    b.Property<DateTime?>("Update_at")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("MonitorDriveAPI.Models.Entities.Phone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created_at")
                        .HasColumnType("datetime2");

                    b.Property<double>("Depreciation")
                        .HasColumnType("float");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Line_bill")
                        .HasColumnType("float");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Percent_usage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Update_at")
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.ToTable("Phones");
                });

            modelBuilder.Entity("MonitorDriveAPI.Models.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Update_at")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d68c8b1d-2cf4-4f16-8dab-f6b49a5fce47"),
                            Created_at = new DateTime(2025, 1, 29, 10, 2, 45, 823, DateTimeKind.Local).AddTicks(3235),
                            Email = "andrew@email.com",
                            Image = "https://images.pexels.com/photos/697509/pexels-photo-697509.jpeg?auto=compress&cs=tinysrgb&w=600",
                            Name = "Andrew",
                            Password = "d*fTcq9w%qJ",
                            Update_at = new DateTime(2025, 1, 29, 10, 2, 45, 823, DateTimeKind.Local).AddTicks(3296)
                        },
                        new
                        {
                            Id = new Guid("3e7be918-25ea-4407-9fcc-a6c0608b71af"),
                            Created_at = new DateTime(2025, 1, 29, 10, 2, 45, 823, DateTimeKind.Local).AddTicks(3307),
                            Email = "sara@email.com",
                            Image = "https://images.pexels.com/photos/3779760/pexels-photo-3779760.jpeg?auto=compress&cs=tinysrgb&w=600",
                            Name = "Sara",
                            Password = "V4Z9!yQUG!k",
                            Update_at = new DateTime(2025, 1, 29, 10, 2, 45, 823, DateTimeKind.Local).AddTicks(3308)
                        },
                        new
                        {
                            Id = new Guid("e4eb9db7-793d-41cf-803f-755e7a495ab5"),
                            Created_at = new DateTime(2025, 1, 29, 10, 2, 45, 823, DateTimeKind.Local).AddTicks(3311),
                            Email = "roger@email.com",
                            Image = "https://images.pexels.com/photos/3760260/pexels-photo-3760260.jpeg?auto=compress&cs=tinysrgb&w=600",
                            Name = "Roger",
                            Password = "Fr5XQvQ&gbT",
                            Update_at = new DateTime(2025, 1, 29, 10, 2, 45, 823, DateTimeKind.Local).AddTicks(3313)
                        });
                });

            modelBuilder.Entity("MonitorDriveAPI.Models.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Autonomy")
                        .HasColumnType("real");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Created_at")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Insurage")
                        .HasColumnType("real");

                    b.Property<float>("Miles")
                        .HasColumnType("real");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Mpg")
                        .HasColumnType("real");

                    b.Property<float>("Percent_usage")
                        .HasColumnType("real");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated_at")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("MonitorDriveAPI.Models.Entities.Driver", b =>
                {
                    b.HasOne("MonitorDriveAPI.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MonitorDriveAPI.Models.Entities.Phone", b =>
                {
                    b.HasOne("MonitorDriveAPI.Models.Entities.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("MonitorDriveAPI.Models.Entities.Vehicle", b =>
                {
                    b.HasOne("MonitorDriveAPI.Models.Entities.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");
                });
#pragma warning restore 612, 618
        }
    }
}
